Class {
	#name : #PjFileExporterWithIndexHtml,
	#superclass : #PjFileExporter,
	#instVars : [
		'htmlStream',
		'htmlGenerator'
	],
	#category : #ZnHostedPharoJS
}

{ #category : #writing }
PjFileExporterWithIndexHtml >> createHtmlFileNamed: someFileName startingWith: beginning and: string ifEditableDo: aBlock [

	| fileReference |
	fileReference := self fileReferenceFrom: someFileName.
	fileReference exists ifTrue: [ 
		self delete: fileReference ifMatches: string ].
	self
		writeHtmlInto: fileReference
		match: string
		startingWith: beginning
		do: aBlock
]

{ #category : #generating }
PjFileExporterWithIndexHtml >> generateHtmlUsing: aCanvas [

	^ aCanvas
		  fullDocument: true;
		  rootBlock: [ :root | 
			  root beHtml5.
			  root title: 'yolo'.
			  root javascript url: 'index.js'.
			  self appClass updateHtmlRoot: root ];
		  render: [ :html | self appClass generateHtmlUsing: html ]
]

{ #category : #accessing }
PjFileExporterWithIndexHtml >> html [

	^ self generateHtmlUsing: self htmlGenerator
]

{ #category : #accessing }
PjFileExporterWithIndexHtml >> htmlGenerator [

	^ htmlGenerator ifNil: [ htmlGenerator := WCHtmlCanvas builder ]
]

{ #category : #'as yet unclassified' }
PjFileExporterWithIndexHtml >> htmlStream: aStream do: aBlock [ 
	
	| savedStream |
	savedStream := htmlStream.
	htmlStream := aStream.
	[
		aBlock value
	] ensure: [ htmlStream := savedStream ]
]

{ #category : #accessing }
PjFileExporterWithIndexHtml >> indexHtmlFileName [
	^ self appClass appFullHtmlFileName
]

{ #category : #writing }
PjFileExporterWithIndexHtml >> writeFiles [
	self writeHtmlFileNamed: self indexHtmlFileName.
	self writeJavascriptFileNamed: self fileName
]

{ #category : #writing }
PjFileExporterWithIndexHtml >> writeHmlCodeOn: aZnCharacterWriteStream [ 
	self htmlStream: aZnCharacterWriteStream do: [ self writeHtmlCode ]
]

{ #category : #writing }
PjFileExporterWithIndexHtml >> writeHtmlCode [
	htmlStream << self html
]

{ #category : #writing }
PjFileExporterWithIndexHtml >> writeHtmlFileNamed: aFileLocator [ 
	"Delete file first, because Windows can't open it for writing later when the file is open."
	
	aFileLocator ifNotNil: [aFileLocator resolve deleteIfAbsent: [ ]].
	self
		createHtmlFileNamed: aFileLocator
		startingWith: self headerLine
		and: 'generated by PharoJS'
		ifEditableDo: [ :fileStream | self writeHmlCodeOn: fileStream]
	
]

{ #category : #writing }
PjFileExporterWithIndexHtml >> writeHtmlInto: fileReference match: string startingWith: beginning  do: aBlock [

	| fileStream |
	fileStream := fileReference writeStream.
	self
		jsStream: fileStream
		do: [ beginning
				ifNotNil: [ self
						nextPutAll: beginning;
						cr ].
			self
				nextPutAll: '<!-- ';
				nextPutAll: (self matchFrom: string);
				nextPutAll: ' on ';
				nextPutAll: DateAndTime now asString.
			OSPlatform current environment at: 'LOGNAME' ifPresent: [: name |
				self nextPutAll: ' by ';nextPutAll: name
			] ifAbsent: [
				OSPlatform current environment at: 'USER' ifPresent: [: name |
					self nextPutAll: ' by ';nextPutAll: name
				] ifAbsent: [
					OSPlatform current environment at: 'USERNAME' ifPresent: [: name |
						self nextPutAll: ' by ';nextPutAll: name]]].
			self nextPutAll: ' -->'.
			aBlock value: fileStream ].
	fileStream close
]
